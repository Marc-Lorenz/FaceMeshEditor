import { Point2D } from "./graph/point2d";
import { Perspective2D } from "./graph/perspective2d";
import { Graph } from "./graph/graph";
import { FaceLandmarker } from "@mediapipe/tasks-vision";
import { FACE_LANDMARKS_NOSE } from "./graph/face_landmarks_features";
const COLOR_POINT_HOVERED = 'rgba(255,250,163,0.6)';
const COLOR_POINT_SELECTED = 'rgba(255,250,58,0.6)';
const COLOR_POINT_DEFAULT = '#0d6efd';
const COLOR_EDGES_TESSELATION = '#d5d5d5';
const COLOR_EDGES_FACE_OVAL = '#42ffef';
const COLOR_EDGES_LIPS = '#ff0883';
const COLOR_EDGES_RIGHT_EYE = '#b3ff42';
const COLOR_EDGES_RIGHT_IRIS = '#efffd8';
const COLOR_EDGES_LEFT_EYE = '#42c6ff';
const COLOR_EDGES_LEFT_IRIS = '#b5ebff';
const COLOR_EDGES_NOSE = '#eada70';
const LINE_WIDTH_DEFAULT = 2;
const POINT_WIDTH = 3;
const POINT_EXTENDED_WIDTH = 5;
export class Editor2D {
    canvas;
    ctx;
    zoomScale = 1;
    offsetX = 0;
    offsetY = 0;
    prevMouseX = 0;
    prevMouseY = 0;
    mouseX = 0;
    mouseY = 0;
    isMoving = false;
    isPanning = false;
    image = new Image();
    onPointsEditedCallback = null;
    constructor() {
        this.canvas = document.getElementById('canvas');
        this.ctx = this.canvas.getContext('2d');
        // Size canvas
        this.clearAndFitToWindow();
        // Register event listeners
        this.canvas.addEventListener('mousedown', ev => this.handleMouseDown(ev));
        this.canvas.addEventListener('mousemove', ev => this.handleMouseMove(ev));
        this.canvas.addEventListener('mouseup', ev => this.handleMouseUp(ev));
        this.canvas.addEventListener('wheel', ev => this.handleWheel(ev));
        this.canvas.addEventListener('mouseout', ev => this.handleMouseUp(ev));
    }
    _dragDepth = 0;
    get dragDepth() {
        return this._dragDepth;
    }
    set dragDepth(value) {
        this._dragDepth = value;
    }
    _graph = new Graph([]);
    get graph() {
        return this._graph;
    }
    set graph(value) {
        if (value) {
            this._graph = value.clone();
            this.draw();
        }
    }
    _showTesselation = false;
    get showTesselation() {
        return this._showTesselation;
    }
    set showTesselation(value) {
        this._showTesselation = value;
        this.draw();
    }
    setOnBackgroundLoadedCallback(callback) {
        this.image.onload = _ => callback(this.image);
    }
    setBackgroundSource(source) {
        const reader = new FileReader();
        reader.onload = _ => {
            const result = reader.result;
            if (result) {
                this.image.src = result.toString();
            }
        };
        reader.readAsDataURL(source);
    }
    getBackgroundImage() {
        return this.image;
    }
    setOnPointsEditedCallback(callback) {
        this.onPointsEditedCallback = callback;
    }
    clearAndFitToWindow() {
        this.canvas.width = window.innerWidth;
        this.canvas.height = window.innerHeight;
    }
    center() {
        const scaleX = this.canvas.width / this.image.width;
        const scaleY = this.canvas.height / this.image.height;
        this.zoomScale = scaleX < scaleY ? scaleX : scaleY;
        this.offsetX = this.canvas.width / 2 - this.image.width / 2 * this.zoomScale;
        this.offsetY = this.canvas.height / 2 - this.image.height / 2 * this.zoomScale;
        // Redraw
        this.draw();
    }
    zoom(out) {
        let dx = (this.mouseX - this.offsetX) / this.zoomScale;
        let dy = (this.mouseY - this.offsetY) / this.zoomScale;
        if (out) {
            this.canvas.style.cursor = "zoom-out";
            this.zoomScale /= 1.1;
        }
        else {
            this.canvas.style.cursor = "zoom-in";
            this.zoomScale *= 1.1;
        }
        // Ensure zoom level is within a reasonable range
        this.zoomScale = Math.min(Math.max(0.1, this.zoomScale), 50);
        // Update offsets
        this.offsetX = this.mouseX - dx * this.zoomScale;
        this.offsetY = this.mouseY - dy * this.zoomScale;
        // Redraw
        this.draw();
    }
    pan(deltaX, deltaY) {
        this.canvas.style.cursor = "move";
        // update offsets
        this.offsetX += deltaX;
        this.offsetY += deltaY;
        // Redraw
        this.draw();
    }
    draw() {
        this.clearAndFitToWindow();
        // Set Transformations
        this.ctx.translate(this.offsetX, this.offsetY);
        this.ctx.scale(this.zoomScale, this.zoomScale);
        // Draw Background
        this.ctx.drawImage(this.image, 0, 0);
        // Draw Mesh
        if (this.showTesselation) {
            this.drawFaceTrait(FaceLandmarker.FACE_LANDMARKS_TESSELATION, COLOR_EDGES_TESSELATION);
        }
        this.drawFaceTrait(FaceLandmarker.FACE_LANDMARKS_FACE_OVAL, COLOR_EDGES_FACE_OVAL);
        this.drawFaceTrait(FaceLandmarker.FACE_LANDMARKS_LIPS, COLOR_EDGES_LIPS);
        this.drawFaceTrait(FaceLandmarker.FACE_LANDMARKS_RIGHT_EYEBROW, COLOR_EDGES_RIGHT_EYE);
        this.drawFaceTrait(FaceLandmarker.FACE_LANDMARKS_RIGHT_EYE, COLOR_EDGES_RIGHT_EYE);
        this.drawFaceTrait(FaceLandmarker.FACE_LANDMARKS_RIGHT_IRIS, COLOR_EDGES_RIGHT_IRIS);
        this.drawFaceTrait(FaceLandmarker.FACE_LANDMARKS_LEFT_EYEBROW, COLOR_EDGES_LEFT_EYE);
        this.drawFaceTrait(FaceLandmarker.FACE_LANDMARKS_LEFT_EYE, COLOR_EDGES_LEFT_EYE);
        this.drawFaceTrait(FaceLandmarker.FACE_LANDMARKS_LEFT_IRIS, COLOR_EDGES_LEFT_IRIS);
        this.drawFaceTrait(FACE_LANDMARKS_NOSE, COLOR_EDGES_NOSE);
    }
    drawPoint(point) {
        if (point && !point.deleted) {
            const projectedPoint = Perspective2D.project(this.image, point);
            if (point.hovered) {
                this.ctx.beginPath();
                this.ctx.fillStyle = COLOR_POINT_HOVERED;
                this.ctx.arc(projectedPoint.x, projectedPoint.y, POINT_EXTENDED_WIDTH / this.zoomScale, 0, Math.PI * 2);
                // this.ctx.font = 20 / zoomScale + "px serif";
                // this.ctx.fillText(point.getId(), projectedPoint.x, projectedPoint.y);
                this.ctx.fill();
            }
            if (point.selected) {
                this.ctx.beginPath();
                this.ctx.fillStyle = COLOR_POINT_SELECTED;
                this.ctx.arc(projectedPoint.x, projectedPoint.y, POINT_EXTENDED_WIDTH / this.zoomScale, 0, Math.PI * 2);
                this.ctx.fill();
            }
            this.ctx.beginPath();
            this.ctx.fillStyle = COLOR_POINT_DEFAULT;
            this.ctx.arc(projectedPoint.x, projectedPoint.y, POINT_WIDTH / this.zoomScale, 0, Math.PI * 2);
            this.ctx.fill();
        }
    }
    drawFaceTrait(connections, color) {
        if (this.graph) {
            const pointPairs = connections.map(connection => {
                return { start: this.graph.getById(connection.start), end: this.graph.getById(connection.end) };
            });
            // Draw edges
            this.ctx.beginPath();
            this.ctx.strokeStyle = color;
            this.ctx.lineWidth = LINE_WIDTH_DEFAULT / this.zoomScale;
            for (const connection of pointPairs) {
                let startPoint = connection.start;
                let endPoint = connection.end;
                if (startPoint && endPoint && !startPoint.deleted && !endPoint.deleted) {
                    startPoint = Perspective2D.project(this.image, startPoint);
                    endPoint = Perspective2D.project(this.image, endPoint);
                    this.ctx.moveTo(startPoint.x, startPoint.y);
                    this.ctx.lineTo(endPoint.x, endPoint.y);
                }
            }
            this.ctx.stroke();
            // Draw points
            for (const connection of pointPairs) {
                let startPoint = connection.start;
                let endPoint = connection.end;
                this.drawPoint(startPoint);
                this.drawPoint(endPoint);
            }
        }
    }
    handleMouseDown(event) {
        // Check if any normalized 3D point is clicked
        if (event.button === 0) {
            // left button
            this._graph.points.filter(p => p.hovered && !p.deleted).forEach(p => {
                p.selected = true;
                this.isMoving = true;
            });
        }
        else if (event.button === 1) {
            // wheel button
            this.isPanning = true;
        }
    }
    handleMouseMove(event) {
        this.prevMouseX = this.mouseX;
        this.prevMouseY = this.mouseY;
        this.mouseX = event.clientX;
        this.mouseY = event.clientY;
        const relativeMouseX = (this.mouseX - this.offsetX) / this.zoomScale;
        const relativeMouseY = (this.mouseY - this.offsetY) / this.zoomScale;
        if (this.isMoving) {
            this.canvas.style.cursor = "pointer";
            // Update normalized coordinates based on mouse position
            const alreadyUpdated = new Set();
            const relativeMouse = Perspective2D.unproject(this.image, new Point2D(-1, relativeMouseX, relativeMouseY, []));
            const selectedPoint = this.graph.getSelected();
            let neighbourPoints = [selectedPoint];
            const deltaX = relativeMouse.x - selectedPoint.x;
            const deltaY = relativeMouse.y - selectedPoint.y;
            for (let depth = 0; depth <= this.dragDepth; depth++) {
                // Go through each depth step
                let tmpPoints = [];
                for (const neigP of neighbourPoints) {
                    const influenceFactor = Math.exp(-depth);
                    const newX = neigP.x + deltaX * influenceFactor;
                    const newY = neigP.y + deltaY * influenceFactor;
                    const newPoint = new Point2D(-1, newX, newY, []);
                    neigP.moveTo(newPoint);
                    alreadyUpdated.add(neigP.id);
                    // extract next depth of neighbours
                    // @ts-ignore
                    tmpPoints = tmpPoints.concat(this.graph.getNeighbourPointsOf(neigP));
                }
                neighbourPoints = tmpPoints.filter(p => !alreadyUpdated.has(p.id));
            }
            // Redraw
            this.draw();
        }
        else if (this.isPanning) {
            this.pan(this.mouseX - this.prevMouseX, this.mouseY - this.prevMouseY);
        }
        else if (this.image) {
            let pointHover = false;
            const relativeMouse = Perspective2D.unproject(this.image, new Point2D(-1, relativeMouseX, relativeMouseY, []));
            this._graph.points.forEach(point => {
                if (!pointHover && Perspective2D.intersects(this.image, point, relativeMouse, POINT_EXTENDED_WIDTH / this.zoomScale)) {
                    point.hovered = true;
                    pointHover = true;
                }
                else {
                    pointHover ||= point.hovered; // Also update if one point gets un-hovered!
                    point.hovered = false;
                }
            });
            if (pointHover) {
                this.draw();
            }
        }
    }
    handleMouseUp(_) {
        if (this.isMoving && this.onPointsEditedCallback) {
            this.onPointsEditedCallback(this._graph);
        }
        this.canvas.style.cursor = "default";
        this.isPanning = false;
        this.isMoving = false;
        this._graph.points.forEach(point => point.selected = false);
    }
    handleWheel(event) {
        if (this.image && !event.shiftKey) {
            this.zoom(event.deltaY > 0);
            event.preventDefault();
        }
    }
}
//# sourceMappingURL=data:application/json;base64,